version: '3'

services:
  django-admin:
    image: django_telethon
    ports:
      - "8080:8080"
    expose:
      - 8080
    environment:
      BOTPRESS_EMAIL: admin # email для входа в botpress
      BOTPRESS_PASS: ${BOTPRESS_PASS}  # пароль для входа в botpress
      BOTPRESS_URL: http://botpress:3000
      HOST_IP: ${HOST_IP}
      POSTGRES_DB: botpress_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secretpw
      POSTGRES_HOST: postgres
      PGPORT: 5435
      DJANGO_SUPERUSER_USERNAME: admin # имя пользователя для django
      DJANGO_SUPERUSER_EMAIL: admin@admin.com # email для django
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD} # пароль для django
    depends_on:
      - postgres
      - botpress
    volumes:
      - ./:/app
    command: sh -c "python manage.py migrate --fake-initial &&
                    python manage.py ensure_adminuser --noinput &&
                    python manage.py runserver 0.0.0.0:8080"

  django-telegram:
    image: django_telethon
    environment:
      BOTPRESS_EMAIL: admin # email для входа в botpress
      BOTPRESS_PASS: ${BOTPRESS_PASS}  # пароль для входа в botpress
      BOTPRESS_URL: http://botpress:3000
      HOST_IP: ${HOST_IP}
      POSTGRES_DB: botpress_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secretpw
      POSTGRES_HOST: postgres
      PGPORT: 5435
    depends_on:
      - postgres
      - botpress
    volumes:
      - ./:/app
    command: sh -c "python manage.py runtelegram"

  botpress:
    image: botpress/server
    command: /botpress/bp
    expose:
      - 3000
    environment:
      BP_MODULE_NLU_DUCKLINGURL: "http://duckling:8000"
      BP_MODULE_NLU_LANGUAGESOURCES: '[{"endpoint":"http://botpress_lang:3100"}]'
      BP_PRODUCTION: true
      BPFS_STORAGE: database
      DATABASE_URL: "postgres://postgres:secretpw@postgres:5435/botpress_db"
    depends_on:
      - botpress_lang
      - duckling
      - postgres
    volumes:
      - botpressdata:/botpress/data
    ports:
      - "3000:3000"

  botpress_lang:
    image: botpress/server
    command: bash -c "./bp lang --offline --dim 100 --langDir /botpress/data/embeddings --port 3100"
    expose:
      - 3100
    volumes:
      - botpressdata:/botpress/data/embeddings
    deploy:
      resources:
        limits:
          memory: 5G

  duckling:
    image: duckling_ru
    command: bash -c "duckling-example-exe -p 8000"
    expose:
      - 8000

  postgres:
    image: postgres:14-alpine
    expose:
      - 5435
    environment:
      PGPORT: 5435
      POSTGRES_DB: botpress_db
      POSTGRES_PASSWORD: secretpw
      POSTGRES_USER: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data

  ya_gpt:
    image: ya_gpt
    command: /bin/sh -c "exec uvicorn app.server:app --host 0.0.0.0 --port 8050"
    expose:
      - 8050
    environment:
      YA_API_KEY: ${YA_API_KEY}
      YA_FOLDER_ID: ${YA_FOLDER_ID}
      CHROMA_AUTH_TOKEN: ${CHROMA_SERVER_AUTH_CREDENTIALS}
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 5300
    depends_on:
      - chromadb
    #ports:
    #  - "8050:8050"

  chromadb:
    image: chromadb/chroma
    expose:
      - 5300
    command: "--workers 1 --host 0.0.0.0 --port 5300 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    environment:
      IS_PERSISTENT: TRUE
      CHROMA_SERVER_AUTH_CREDENTIALS: ${CHROMA_SERVER_AUTH_CREDENTIALS}
      CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER: "chromadb.auth.token.TokenConfigServerAuthCredentialsProvider"
      CHROMA_SERVER_AUTH_PROVIDER: "chromadb.auth.token.TokenAuthServerProvider"
    volumes:
      - chroma-data:/chroma/chroma/
    ports:
      - "5300:5300"

volumes:
  pgdata:
  botpressdata:
  chroma-data:
    driver: local
